-
	function hasSensors(datasource) {
		if (datasource.required && !('hypercat' in datasource)) {
			for(const sensor of sensors) {
				if(getMetadata(sensor, 'urn:X-databox:rels:hasType') === datasource.type) {
					return true;
				}
			}
			return false;
		}
		return true;
	}

	function getMetadata(item, rel) {
		if('item-metadata' in item) {
			for(const metadataItem of item['item-metadata']) {
				if(metadataItem.rel === rel) {
					return metadataItem.val;
				}
			}
		}
		return null;
	}

	function getDatasource(id) {
		for(const datasource of manifest.datasources) {
			if(datasource.clientid === id) {
				return datasource;
			}
		}
	}

	function isDatasourceActive(datasource) {
		for (const pack of manifest.packages) {
			if (pack.enabled) {
				for (const datasource_id of pack.datastores) {
					if (datasource.clientid == datasource_id) {
						return true;
					}
				}
			}
		}

		return false;
	}

	function isPackageValid(pack) {
		for (const datasource_id of pack.datastores) {
			const datasource = getDatasource(datasource_id);
			if (datasource.required && !(datasource.hypercat)) {
				return false;
			}
		}
		return true;
	}

	function isValid() {
		let valid = true;
		if ('packages' in manifest && manifest.packages.length > 0) {
			let enabled = 0;

			for (let pack of manifest.packages) {
				if (pack.enabled) {
					enabled++;
					if (!isPackageValid(pack)) {
						valid = false;
						break;
					}
				}

				if (!valid) {
					break;
				}
			}

			valid = valid && enabled > 0
		}

		return valid;
	}

div(style="padding: 16px")
	div.mdc-card
		section(style="display:flex; padding: 16px;")
			div.app-icon-letter
				= manifest.displayName.charAt(0).toUpperCase()
			div(style="padding: 0px 16px")
				div.mdc-card__title--large
					= manifest.displayName
				div.mdc-card__subtitle.mdc-typography--caption
					= manifest.author.replace(/\s*\(.*?\)\s*/g, '').replace(/\s*<.*?>\s*/g, '')
				div
					i.material-icons
						| star
					i.material-icons
						| star
					i.material-icons
						| star
					i.material-icons.disabled
						| star
					i.material-icons.disabled
						| star
				div(style="padding-top: 8px;")
					= manifest.description

		div.mdc-layout-grid
			div.mdc-layout-grid__inner
				if 'packages' in manifest
					if manifest.packages.length > 1
						each pack, index in manifest.packages
							div.mdc-layout-grid__cell.mdc-layout-grid__cell--span-4.package(id=("pack_" + (pack.id || index)), class=(pack.required || pack.enabled) ? '' : 'transparent')
								div.mdc-theme--text-primary-on-dark.dark(style="display: flex; align-items: center")
									div.mdc-typography--title.fill.padded
										= pack.name
									div.badge.material-icons
										| check
								div.fill.padded.mdc-theme--text-primary-on-dark.mdc-theme--primary-bg
									= pack.purpose
								div.padded.mdc-theme--text-primary-on-dark.mdc-theme--primary-bg
									= pack.benefits
								div.exchange
									div
										| in exchange for
								div.dark.padded.mdc-theme--text-primary-on-dark
									= pack.risks
									if 'datasources' in pack
										each datasource in pack.datasources
											div
												= 'Access to a ' + getDatasource(datasource).type
									if 'datastores' in pack
										each datasource in pack.datastores
											div
												= 'Access to a ' + getDatasource(datasource).type
								if pack.required
									div.mdc-theme--accent-bg.padded
										| Required

				if 'datasources' in manifest && manifest.datasources.length > 0
					div.mdc-layout-grid__cell.mdc-layout-grid__cell--span-12(style="margin-top:16px")
						div.mdc-theme--text-primary-on-dark.mdc-theme--primary-bg.mdc-typography--title(style="padding: 8px 16px")
							| Select Data Sources

					each datasource in manifest.datasources
						div.mdc-layout-grid__cell--span-12(style="padding: 0 16px; display: flex; flex-direction: column")
							- var active = isDatasourceActive(datasource);
							- var sensorsExist = hasSensors(datasource);
							div.mdc-select(role="listbox", style="width: 100%;", datasource=datasource.clientid, id=datasource.clientid, aria-disabled=active && sensorsExist ? 'false' : 'true')
								select.mdc-select__native-control
									option(value="", disabled, selected=(!datasource.hypercat), style="display: none")
									each sensor in sensors
										if getMetadata(sensor, 'urn:X-databox:rels:hasType') === datasource.type
											option(selected=(datasource.hypercat && sensor.href === datasource.hypercat.href), value=sensor.href)
												= getMetadata(sensor, 'urn:X-hypercat:rels:hasDescription:en')
								div.mdc-select__label(class=!datasource.hypercat ? '' : 'mdc-select__label--float-above')
									= datasource.type
								div.mdc-select__bottom-line
							div.mdc-typography--caption(style="color: #d50000;")
								if !sensorsExist
									| Required, but no datasources found
								else if !datasource.hypercat
									| Required
								else
									| &nbsp;

		section.mdc-card__actions
			button(disabled=!isValid())#install_button.mdc-button.mdc-card__action.mdc-button--primary
				| Install